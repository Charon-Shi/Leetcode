/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if(!head || !head->next) return true;
        ListNode *newHead = new ListNode(0);
        ListNode *firstSlow = head, *secondSlow = head, *fast = head;
        
        //reach to middle and then backtrace firstSlow to head.
        while(fast->next && fast->next->next) {
            //fast pointer movement
            fast = fast->next->next;
            
            //reverse the first half
            firstSlow = firstSlow->next;
            secondSlow->next = newHead;
            newHead = secondSlow;
            secondSlow = firstSlow;
        }
        
        //after following operation, secondSlow point to middle, firstSlow point to post half.
        firstSlow = firstSlow->next;
        secondSlow->next = newHead;
        if(!fast->next) secondSlow = secondSlow->next;
        
        //compare two links
        while(firstSlow) {
            if(firstSlow->val != secondSlow->val)
                return false;
            
            firstSlow = firstSlow->next;
            secondSlow = secondSlow->next;
        }
        
        return true;
    }
};
