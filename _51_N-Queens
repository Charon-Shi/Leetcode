class Solution {
public:
	void find(int n, queue<int> Table, vector<string> &result, vector<vector<string> > &final)
	{
		if(Table.size() == 0) { final.push_back(result); return; }

		bool legal; int tmp;
		for(int i = 0; i < Table.size(); i++)
		{
			legal = true;
			for(int j = n-Table.size()-1, k = Table.front()-1, s = Table.front()+1; j >= 0; j--,k--,s++)
			{
				if(k >= 0)
				    if(result[j][k] == 'Q')	{ legal = false; break; }
				if(s < n)
				    if(result[j][s] == 'Q')	{ legal = false; break; }
			}

			if(legal)
			{
				result[n-Table.size()][tmp = Table.front()] = 'Q';
				Table.pop();
				find(n, Table, result, final);
				Table.push(tmp);
				result[n-Table.size()][tmp] = '.';
			}
			else{ tmp = Table.front(); Table.pop(); Table.push(tmp); }
		}
	}

    vector<vector<string> > solveNQueens(int n)
	{
    	vector<vector<string> > final;
    	vector<string> result;
    	queue<int> Table;

    	string temp;
    	for(int i = 0; i < n; i++) { temp.push_back('.'); Table.push(i); }
    	for(int i = 0; i < n; i++)	result.push_back(temp);
    	find(n, Table, result, final);

    	return final;
	}
};
