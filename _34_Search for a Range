//bsearch untill middle is equal with target, then bsearch left boundary and then bsearch right boundary
class Solution {
public:
    vector<int> searchRange(int A[], int n, int target)
	{
    	vector<int> result;
		int left = 0, right = n-1, middle, L, R, M;
		while(left <= right)
		{
			middle = (left + right)/2;
			if(target > A[middle]) left = middle + 1;
			else if(target < A[middle]) right = middle - 1;
			else break;
		}
		if(left > right)
		{
			result.push_back(-1);
			result.push_back(-1);
			return result;
		}
		// find left
		M = middle;
		R = right;
		right = M;
		while(left <= right)
		{
			middle = (left + right)/2;
			if(A[middle] < target) left = middle + 1;
			else if(middle == 0) { L = 0; break; }
			else if(A[middle] == target && A[middle-1] == target) right = middle - 1;
			else if(A[middle] == target && A[middle-1] < target) { L = middle; break; }
		}

		//find right
		left = M;
		right = R;
		while(left <= right)
		{
			middle = (left + right)/2;
			if(A[middle] > target) right = middle - 1;
			else if(middle == n-1) { R = n-1; break; }
			else if(A[middle] == target && A[middle+1] == target) left = middle + 1;
			else if(A[middle] == target && A[middle+1] > target) { R = middle; break; }
		}
		result.push_back(L);
		result.push_back(R);
    	return result;
    }
};
