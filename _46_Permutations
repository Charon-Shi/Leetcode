
class Solution {
public:
	inline void nextPermutation(vector<int> &num)
	{
		if(num.size() <= 1)	return;

	    int temp, i = num.size()-2;
	    map<int, int> hash_map;
	    unsigned int index;

	    hash_map.insert(pair<int, int>(num[i+1], i+1));
	    while(num[i] >= num[i+1] && i >= 0)
	    {
	    	hash_map.insert(pair<int, int>(num[i], i));
	    	i--;
	    }
	    if(i != -1)
	    {
			map<int, int>::reverse_iterator it = hash_map.rbegin();
			for(; it != hash_map.rend(); it++)
			{
				if(num[i] >= it->first)
					break;
			}

			it--;
			index = it->second;
			temp = it->first;

	   		temp = num[index];
	   		num[index] = num[i];
	   		num[i] = temp;

	   		sort(num.begin()+i+1, num.end());
	   	}
	    else
	    {
	    	sort(num.begin(), num.end());
	    }
	}

	vector<vector<int> > permute(vector<int> &num)
	{
		vector<vector<int> > result;

		vector<int> temp = num;
		result.push_back(num);
		if(num.size() == 1) { return result; }
		else
		{
			nextPermutation(temp);
			while(temp != num)
			{
				result.push_back(temp);
				nextPermutation(temp);
			}
		}
		return result;
	}
};
