class Solution {
public:
    bool isNumber(string s) {
        long PosOfPoint = -1, PosOfE = 0;
        if (s.size() == 0) return false;
        
        while (s[0] == ' ') s.erase(s.begin());   //get rid of white space from beginning
        while (s[s.size()-1] == ' ') s.erase(s.end()-1);  //get rid of white space from tail
        if (s[0] == '-' || s[0] == '+') s.erase(s.begin());  //get rid of '+' and '-'
        
        PosOfPoint = s.find('.');
        if( -1 != PosOfPoint) { //rule out "1 ." or ".  1"
            if (((PosOfPoint+1 < s.size()) && ('0' <= s[PosOfPoint+1] && s[PosOfPoint+1] <= '9') ) ||
                ( (PosOfPoint-1 >= 0) && ('0' <= s[PosOfPoint-1] && s[PosOfPoint-1] <= '9')))
                s[PosOfPoint] = '0';
            else return false;
        }
        
        PosOfE = s.find_first_of("eE");
        if (PosOfE == s.size()-1 || PosOfE == 0) return false; //rule out "E1" or "1E"
        if (PosOfE != -1) { //rule out "e+" or "e-"
            s[PosOfE] = '0';
            if ((s[PosOfE+1] == '-' || s[PosOfE+1] == '+') && PosOfE+1 < s.size()-1) s[PosOfE+1] = '0';
        }
        //rule out the possibility like "1e3.2"
        if(PosOfPoint >= 0 && PosOfE >= 0 && PosOfE < PosOfPoint) return false; 
        for (unsigned int i = 0; i < s.size(); i++)
            if (s[i] < '0' || s[i] > '9') return false;

        return true;
    }
};
