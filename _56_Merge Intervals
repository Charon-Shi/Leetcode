class Solution {
public:
	struct cmp
	{
	    bool operator ()(const Interval &a, const Interval &b)
	    {
	            return (a.start < b.start) ||
	            		((a.start == b.start) && (a.end < b.end));
	    }
	};

	vector<Interval> merge(vector<Interval>& intervals)
    {
		vector<Interval> result;
		Interval temp, res;
    
        if(intervals.size() == 0) return result;
		sort(intervals.begin(), intervals.end(), cmp());
		res = intervals[0];
		for(unsigned int i = 1; i < intervals.size(); i++)
		{
			temp = intervals[i];
			if(temp.start <= res.end)
			{
				res.start = min(temp.start, res.start);
				res.end = max(temp.end, res.end);
			}
			else
				result.push_back(res), res = temp;
		}
		result.push_back(res);
		return result;
    }
};
