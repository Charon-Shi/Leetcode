// find the highest point and do calculation from left to max and then do calculation from right to max
class Solution {
public:
    int trap(vector<int>& A)
    {
        vector<int> leftCase, rightCase;
        int result = 0, max = -1, i, j, area;

        if(A.size() <= 1) return 0;

        for(i = 0; i < A.size(); i++) { if(A[i] > A[max]) max = i; }
        for(i = 1; i <= max; i++)
        {
        	if(A[i] < A[i-1])
        	{
        		if(leftCase.size() == 0)
        			leftCase.push_back(i-1);
        	}
        	else if(A[i] > A[i-1])
        	{
        		if(leftCase.size() != 0)
        		{
        			if(A[i] >= A[leftCase[0]])
        			{
        				leftCase.push_back(i);
        				area = A[leftCase[0]]*abs(leftCase[1] - leftCase[0]);
        				for(unsigned int k = leftCase[0]; k < leftCase[1]; k++) area -= A[k];
        				result += area;
        				leftCase.clear();
        			}
        		}
        	}
        }

        for(j = A.size()-2; j >= max; j--)
        {
        	if(A[j] < A[j+1])
        	{
        		if(rightCase.size() == 0)
        			rightCase.push_back(j+1);
        	}
        	else if(A[j] > A[j+1])
        	{
        		if(rightCase.size() != 0)
        		{
        			if(A[j] >= A[rightCase[0]])
        			{
        				rightCase.push_back(j);
        				area = A[rightCase[0]]*abs(rightCase[1] - rightCase[0]);
        				for(unsigned int k = rightCase[0]; k > rightCase[1]; k--) area -= A[k];
        				result += area;
        				rightCase.clear();
        			}
        		}
        	}
        }

        return result;
    }
};
