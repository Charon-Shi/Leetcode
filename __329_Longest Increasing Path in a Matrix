class Solution {
public:
    int longestIncreasingPath(vector<vector<int>>& matrix) {
        if(matrix.empty())
            return 0;
            
        int ans = 0, row = matrix[0].size(), col = matrix.size();
        vector<vector<int> > dp(matrix.size(), vector<int>(matrix[0].size(), 0));
        
        for(int i = 0; i < matrix.size(); i++) {
            for(int j = 0; j < matrix[0].size(); j++) {
                ans = max(dfs(matrix, dp, i, j, col, row), ans);
            }
        }
        
        return ans;
    }
    
    int dfs(vector<vector<int>>& matrix, vector<vector<int>>& dp, int i, int j, int col, int row) {
        if(dp[i][j])
            return dp[i][j];
        
        int dx[] = {-1, 0, 0, 1};
        int dy[] = {0, -1, 1, 0};
        int x = 0, y = 0;
        
        for(int k = 0; k < 4; k++) {
            x = i + dx[k];
            y = j + dy[k];
            
            if(x >= 0 && x < col && y >= 0 && y < row && matrix[x][y] > matrix[i][j])
                dp[i][j] = max(dp[i][j], dfs(matrix, dp, x, y, col, row));
        }
        
        return ++dp[i][j];
    }
};
