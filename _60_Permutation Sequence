class Solution {
public:
    string getPermutation(int n, int k) {
        string Number, Result;
        vector<int> Table(n+1);
        Table[0] = 0, Table[1] = 1;
        for (unsigned int i = 2; i < n+1; i++) Table[i] = i * Table[i-1]; //Table contain i!
        
        for (unsigned int i = 1; i <= n; i++) Number.push_back(i+'0'); //all possible numbers in set
        for (int i = n; k > 1; i--) {
            int div = k/Table[i-1], remainder = k - Table[i-1]*div;
            if (remainder > 0) {
                Result.push_back(Number[div]);
                Number.erase(Number.begin()+div);
                k -= div * Table[i-1];
            }
            else if (remainder == 0) {
                Result.push_back(Number[div-1]);
                Number.erase(Number.begin()+div-1);
                k -= (div-1) * Table[i-1];
            }
        }
        while (!Number.empty()) { // when k == 1, simply put the rest numbers in increasing order.
            Result.push_back(Number.front());
            Number.erase(Number.begin());
        }
        return Result;
    }
};
