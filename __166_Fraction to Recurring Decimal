class Solution {
public:
    string fractionToDecimal(long long numerator, long long denominator) {
        ostringstream out;
        string result;
        unordered_map<long long,int> have;
        long long A = abs(numerator), B = abs(denominator), Rem;
        int count = 0;
        
        out << A/B;
        result = out.str();
        result.push_back('.');
        Rem = A%B;
        
        while((have.find(Rem) == have.end()) && Rem != 0) {
            have.insert(std::pair<long long,int>(Rem, count++));
            Rem *= 10;
            result.push_back('0'+Rem/B);
            Rem %= B;
        }
        
        if((double)numerator/denominator < 0.0) result.insert(0, "-");
        if(result[result.size()-1] == '.') {
            result.pop_back();
            return result;
        }
        if(!(have.find(Rem) == have.end())){
            result.push_back(')');
            result.insert(result.size()-(have.size()-have[Rem]+1), "(");
            return result;
        }
        return result;
    }
};
